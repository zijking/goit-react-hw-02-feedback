{"version":3,"sources":["components/feedbackOptions/FeedbackOptions.module.css","components/notification/Notification.module.css","components/feedback/Feedback.js","components/feedbackOptions/FeedbackOptions.js","components/section/Section.js","components/notification/Notification.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Feedback","good","neutral","bad","total","procent","FeedbackOptions","onLeaveFeedback","className","s","button","onClick","Section","title","children","Notification","message","noFeadback","App","state","incrementFeedback","name","setState","prevState","countTotalFeedback","countPositiveFeedbackPercentage","positive","x","toFixed","this","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+HACAA,EAAOC,QAAU,CAAC,OAAS,kC,qBCA3BD,EAAOC,QAAU,CAAC,WAAa,mC,oMCchBC,MAZf,YAA2D,IAAvCC,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,QAASC,EAAuB,EAAvBA,IAAKC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,QAC7C,OACE,qCACE,uCAAUJ,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWC,KACX,oDAAuBC,EAAvB,W,gBCOSC,MAhBf,YAA+C,IAApBC,EAAmB,EAAnBA,gBACzB,OACE,8BACE,wBAAQC,UAAWC,IAAEC,OAAQC,QAAS,kBAAMJ,EAAgB,SAA5D,kBAGA,wBAAQC,UAAWC,IAAEC,OAAQC,QAAS,kBAAMJ,EAAgB,YAA5D,qBAGA,wBAAQC,UAAWC,IAAEC,OAAQC,QAAS,kBAAMJ,EAAgB,QAA5D,qBCCSK,MATf,YAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACxB,OACE,qCACE,6BAAKD,IACJC,M,gBCAQC,MAJf,YAAoC,IAAZC,EAAW,EAAXA,QACtB,OAAO,mBAAGR,UAAWC,IAAEQ,WAAhB,SAA6BD,KCsDvBE,E,4MAjDbC,MAAQ,CAAElB,KAAM,EAAGC,QAAS,EAAGC,IAAK,G,EAEpCiB,kBAAoB,SAAAC,GAClB,OAAO,EAAKC,UAAS,SAAAC,GAAS,sBAC3BF,EAAOE,EAAUF,GAAQ,O,EAI9BG,mBAAqB,WAAO,IAAD,EACM,EAAKL,MACpC,OAFyB,EACjBlB,KADiB,EACXC,QADW,EACFC,K,EAIzBsB,gCAAkC,WAChC,IAAMC,EAAW,EAAKP,MAAMlB,KACtBG,EAAQ,EAAKoB,qBAEfG,GAAiB,IAAXD,EAAkBtB,GAAOwB,QAAQ,GAK3C,OAHc,IAAVxB,IACFuB,EAAI,GAECA,G,uDAIP,OACE,sBAAKnB,UAAU,YAAf,UACE,cAAC,EAAD,CAASK,MAAM,wBAAf,SACE,cAAC,EAAD,CAAiBN,gBAAiBsB,KAAKT,sBAEzC,cAAC,EAAD,CAASP,MAAM,YAAf,SACiC,IAA9BgB,KAAKL,qBACJ,cAAC,EAAD,CAAcR,QAAQ,sBAEtB,cAAC,EAAD,CACEf,KAAM4B,KAAKV,MAAMlB,KACjBC,QAAS2B,KAAKV,MAAMjB,QACpBC,IAAK0B,KAAKV,MAAMhB,IAChBC,MAAOyB,KAAKL,qBACZnB,QAASwB,KAAKJ,6C,GAzCVK,aCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d7a9192e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"FeedbackOptions_button__1-XMT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"noFeadback\":\"Notification_noFeadback__1DHRw\"};","import React from 'react';\r\nimport './Feedback.module.css';\r\n\r\nfunction Feedback({ good, neutral, bad, total, procent }) {\r\n  return (\r\n    <>\r\n      <p>Good: {good}</p>\r\n      <p>Neutral: {neutral}</p>\r\n      <p>Bad: {bad}</p>\r\n      <p>Total: {total}</p>\r\n      <p>Positive feedback: {procent}%</p>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Feedback;\r\n","import s from './FeedbackOptions.module.css';\r\nfunction FeedbackOptions({ onLeaveFeedback }) {\r\n  return (\r\n    <p>\r\n      <button className={s.button} onClick={() => onLeaveFeedback('good')}>\r\n        Good\r\n      </button>\r\n      <button className={s.button} onClick={() => onLeaveFeedback('neutral')}>\r\n        Neutral\r\n      </button>\r\n      <button className={s.button} onClick={() => onLeaveFeedback('bad')}>\r\n        Bad\r\n      </button>\r\n    </p>\r\n  );\r\n}\r\n\r\nexport default FeedbackOptions;\r\n","import React from 'react';\r\n\r\nfunction Section({ title, children }) {\r\n  return (\r\n    <>\r\n      <h2>{title}</h2>\r\n      {children}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Section;\r\n","import React from 'react';\r\nimport s from './Notification.module.css';\r\nfunction Notification({ message }) {\r\n  return <p className={s.noFeadback}>{message}</p>;\r\n}\r\n\r\nexport default Notification;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Feedback from './components/feedback';\nimport FeedbackOptions from './components/feedbackOptions';\nimport Section from './components/section';\nimport Notification from './components/notification';\n\nclass App extends Component {\n  state = { good: 0, neutral: 0, bad: 0 };\n\n  incrementFeedback = name => {\n    return this.setState(prevState => ({\n      [name]: prevState[name] + 1,\n    }));\n  };\n\n  countTotalFeedback = () => {\n    const { good, neutral, bad } = this.state;\n    return good + neutral + bad;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    const positive = this.state.good;\n    const total = this.countTotalFeedback();\n\n    let x = ((positive * 100) / total).toFixed(2);\n\n    if (total === 0) {\n      x = 0;\n    }\n    return x;\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions onLeaveFeedback={this.incrementFeedback} />\n        </Section>\n        <Section title=\"Statistic\">\n          {this.countTotalFeedback() === 0 ? (\n            <Notification message=\"No feedback given\" />\n          ) : (\n            <Feedback\n              good={this.state.good}\n              neutral={this.state.neutral}\n              bad={this.state.bad}\n              total={this.countTotalFeedback()}\n              procent={this.countPositiveFeedbackPercentage()}\n            />\n          )}\n        </Section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}